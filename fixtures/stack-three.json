{
 "Resources": {
  "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "underwriting-manual-bucket-964",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "aws-cdk:cr-owned:e6e041a5",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/UnderwritingManualS3Bucket-964/S3Bucket-underwriting-manual-bucket-964/Resource"
   }
  },
  "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket964PolicyCDB0BD68": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/UnderwritingManualS3Bucket-964/S3Bucket-underwriting-manual-bucket-964/Policy/Resource"
   }
  },
  "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket964AutoDeleteObjectsCustomResourceB35D43C4": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0"
    }
   },
   "DependsOn": [
    "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket964PolicyCDB0BD68"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/UnderwritingManualS3Bucket-964/S3Bucket-underwriting-manual-bucket-964/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "UploadUnderwritingManualAwsCliLayerFC87A608": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/UploadUnderwritingManual/AwsCliLayer/Resource",
    "aws:asset:path": "asset.3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "UploadUnderwritingManualCustomResource9887FBC7": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     "cdk-hnb659fds-assets-339263341917-us-east-1"
    ],
    "SourceObjectKeys": [
     "93da94f60a0c7f1c49cdd2746f5e0a4dc0faf3f26b48b893f8f0cd166557fc57.zip"
    ],
    "DestinationBucketName": {
     "Ref": "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0"
    },
    "RetainOnDelete": false,
    "Prune": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/UploadUnderwritingManual/CustomResource/Default"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        "arn:aws:s3:::cdk-hnb659fds-assets-339263341917-us-east-1",
        "arn:aws:s3:::cdk-hnb659fds-assets-339263341917-us-east-1/*"
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "0158f40002a8c211635388a87874fd4dcc3d68f525fe08a0fe0f014069ae539c.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "UploadUnderwritingManualAwsCliLayerFC87A608"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
    "aws:asset:path": "asset.0158f40002a8c211635388a87874fd4dcc3d68f525fe08a0fe0f014069ae539c",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "underwriting-document-bucket-964",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/DocumentS3Bucket-964/S3Bucket-underwriting-document-bucket-964/Resource"
   }
  },
  "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket964Policy437ADC05": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/DocumentS3Bucket-964/S3Bucket-underwriting-document-bucket-964/Policy/Resource"
   }
  },
  "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket964AutoDeleteObjectsCustomResource542330AB": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
    }
   },
   "DependsOn": [
    "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket964Policy437ADC05"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/DocumentS3Bucket-964/S3Bucket-underwriting-document-bucket-964/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket964NotificationsA1F653FD": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
    },
    "NotificationConfiguration": {
     "EventBridgeConfiguration": {}
    },
    "Managed": true
   },
   "DependsOn": [
    "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket964Policy437ADC05"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/DocumentS3Bucket-964/S3Bucket-underwriting-document-bucket-964/Notifications/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    strToHash=json.dumps(n, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "step-function-input-bucket-964",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/StepFunctionInputOutputBucket-964/S3Bucket-step-function-input-bucket-964/Resource"
   }
  },
  "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket964PolicyA3983ACE": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/StepFunctionInputOutputBucket-964/S3Bucket-step-function-input-bucket-964/Policy/Resource"
   }
  },
  "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket964AutoDeleteObjectsCustomResource60F68D89": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
    }
   },
   "DependsOn": [
    "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket964PolicyA3983ACE"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/StepFunctionInputOutputBucket-964/S3Bucket-step-function-input-bucket-964/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "KnowledgeBaseVectorCollectionEncryptionPolicyC8A80F57": {
   "Type": "AWS::OpenSearchServerless::SecurityPolicy",
   "Properties": {
    "Name": "encryptionpolicygenation392ae2a7",
    "Policy": "{\"Rules\":[{\"ResourceType\":\"collection\",\"Resource\":[\"collection/vectorstoregenaiuection392ae2a7\"]}],\"AWSOwnedKey\":true}",
    "Type": "encryption"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/VectorCollection/EncryptionPolicy"
   }
  },
  "KnowledgeBaseVectorCollectionNetworkPolicyC7FEE8CD": {
   "Type": "AWS::OpenSearchServerless::SecurityPolicy",
   "Properties": {
    "Name": "networkpolicygenaiction392ae2a7",
    "Policy": "[{\"Rules\":[{\"ResourceType\":\"collection\",\"Resource\":[\"collection/vectorstoregenaiuection392ae2a7\"]},{\"ResourceType\":\"dashboard\",\"Resource\":[\"collection/vectorstoregenaiuection392ae2a7\"]}],\"AllowFromPublic\":true}]",
    "Type": "network"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/VectorCollection/NetworkPolicy"
   }
  },
  "KnowledgeBaseVectorCollection7204FC26": {
   "Type": "AWS::OpenSearchServerless::Collection",
   "Properties": {
    "Name": "vectorstoregenaiuection392ae2a7",
    "Type": "VECTORSEARCH"
   },
   "DependsOn": [
    "KnowledgeBaseVectorCollectionEncryptionPolicyC8A80F57",
    "KnowledgeBaseVectorCollectionNetworkPolicyC7FEE8CD"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/VectorCollection/VectorCollection"
   }
  },
  "KnowledgeBaseVectorCollectionAOSSApiAccessAllF67C95FE": {
   "Type": "AWS::IAM::ManagedPolicy",
   "Properties": {
    "Description": "",
    "Path": "/",
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "aoss:APIAccessAll",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "KnowledgeBaseVectorCollection7204FC26",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/VectorCollection/AOSSApiAccessAll/Resource"
   }
  },
  "KnowledgeBaseVectorCollectionDataAccessPolicy345B3145": {
   "Type": "AWS::OpenSearchServerless::AccessPolicy",
   "Properties": {
    "Name": "dataaccesspolicygenation392ae2a7",
    "Policy": {
     "Fn::Join": [
      "",
      [
       "[{\"Rules\":[{\"Resource\":[\"collection/vectorstoregenaiuection392ae2a7\"],\"Permission\":[\"aoss:DescribeCollectionItems\",\"aoss:CreateCollectionItems\",\"aoss:UpdateCollectionItems\"],\"ResourceType\":\"collection\"},{\"Resource\":[\"index/vectorstoregenaiuection392ae2a7/*\"],\"Permission\":[\"aoss:UpdateIndex\",\"aoss:DescribeIndex\",\"aoss:ReadDocument\",\"aoss:WriteDocument\",\"aoss:CreateIndex\"],\"ResourceType\":\"index\"}],\"Principal\":[\"",
       {
        "Fn::GetAtt": [
         "KnowledgeBaseRoleDB110E91",
         "Arn"
        ]
       },
       "\"],\"Description\":\"\"}]"
      ]
     ]
    },
    "Type": "data"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/VectorCollection/DataAccessPolicy"
   },
   "Condition": "KnowledgeBaseVectorCollectionIsDataAccessPolicyNotEmptyD762485C"
  },
  "KnowledgeBaseVectorIndexManageIndexPolicy5BC4FA23": {
   "Type": "AWS::OpenSearchServerless::AccessPolicy",
   "Properties": {
    "Name": "manageindexpolicygendexe4187479",
    "Policy": {
     "Fn::Join": [
      "",
      [
       "[{\"Rules\":[{\"Resource\":[\"index/vectorstoregenaiuection392ae2a7/*\"],\"Permission\":[\"aoss:DescribeIndex\",\"aoss:CreateIndex\",\"aoss:DeleteIndex\",\"aoss:UpdateIndex\"],\"ResourceType\":\"index\"},{\"Resource\":[\"collection/vectorstoregenaiuection392ae2a7\"],\"Permission\":[\"aoss:DescribeCollectionItems\"],\"ResourceType\":\"collection\"}],\"Principal\":[\"",
       {
        "Fn::GetAtt": [
         "OpenSearchIndexCRProviderCRRole466FC04E",
         "Arn"
        ]
       },
       "\"],\"Description\":\"\"}]"
      ]
     ]
    },
    "Type": "data"
   },
   "DependsOn": [
    "KnowledgeBaseVectorCollectionAOSSApiAccessAllF67C95FE",
    "KnowledgeBaseVectorCollectionDataAccessPolicy345B3145",
    "KnowledgeBaseVectorCollectionEncryptionPolicyC8A80F57",
    "KnowledgeBaseVectorCollectionNetworkPolicyC7FEE8CD",
    "KnowledgeBaseVectorCollection7204FC26"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/VectorIndex/ManageIndexPolicy"
   }
  },
  "KnowledgeBaseVectorIndex856C0712": {
   "Type": "Custom::OpenSearchIndex",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "OpenSearchIndexCRProviderframeworkonEvent6CAE4696",
      "Arn"
     ]
    },
    "Endpoint": {
     "Fn::Join": [
      "",
      [
       {
        "Fn::GetAtt": [
         "KnowledgeBaseVectorCollection7204FC26",
         "Id"
        ]
       },
       ".us-east-1.aoss.amazonaws.com"
      ]
     ]
    },
    "IndexName": "bedrock-knowledge-base-default-index",
    "VectorField": "bedrock-knowledge-base-default-vector",
    "Dimensions": 1024,
    "MetadataManagement": [
     {
      "MappingField": "AMAZON_BEDROCK_TEXT_CHUNK",
      "DataType": "text",
      "Filterable": true
     },
     {
      "MappingField": "AMAZON_BEDROCK_METADATA",
      "DataType": "text",
      "Filterable": false
     }
    ]
   },
   "DependsOn": [
    "KnowledgeBaseVectorCollectionAOSSApiAccessAllF67C95FE",
    "KnowledgeBaseVectorCollectionDataAccessPolicy345B3145",
    "KnowledgeBaseVectorCollectionEncryptionPolicyC8A80F57",
    "KnowledgeBaseVectorCollectionNetworkPolicyC7FEE8CD",
    "KnowledgeBaseVectorCollection7204FC26",
    "KnowledgeBaseVectorIndexManageIndexPolicy5BC4FA23"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/VectorIndex/VectorIndex/Default"
   }
  },
  "KnowledgeBaseRoleDB110E91": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "bedrock.amazonaws.com"
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Condition": {
        "StringEquals": {
         "aws:SourceAccount": "339263341917"
        },
        "ArnLike": {
         "aws:SourceArn": "arn:aws:bedrock:us-east-1:339263341917:knowledge-base/*"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "bedrock.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Ref": "KnowledgeBaseVectorCollectionAOSSApiAccessAllF67C95FE"
     }
    ],
    "RoleName": "AmazonBedrockExecutionRoleForKnowledgeBaseGenAIUndgeBaseF088A14C"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/KnowledgeBase/Role/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "The KB role needs read only access to all objects in the data source bucket.",
       "id": "AwsSolutions-IAM5"
      }
     ]
    }
   }
  },
  "KnowledgeBaseRoleDefaultPolicyF1120426": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "bedrock:InvokeModel",
       "Effect": "Allow",
       "Resource": "arn:aws:bedrock:us-east-1::foundation-model/cohere.embed-english-v3"
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "KnowledgeBaseRoleDefaultPolicyF1120426",
    "Roles": [
     {
      "Ref": "KnowledgeBaseRoleDB110E91"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/KnowledgeBase/Role/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "The KB role needs read only access to all objects in the data source bucket.",
       "id": "AwsSolutions-IAM5"
      }
     ]
    }
   }
  },
  "KnowledgeBaseKBD784F467": {
   "Type": "Custom::Bedrock-KnowledgeBase",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BedrockCRProviderframeworkonEvent412F4EF1",
      "Arn"
     ]
    },
    "knowledgeBaseConfiguration": {
     "type": "VECTOR",
     "vectorKnowledgeBaseConfiguration": {
      "embeddingModelArn": "arn:aws:bedrock:us-east-1::foundation-model/cohere.embed-english-v3"
     }
    },
    "roleArn": {
     "Fn::GetAtt": [
      "KnowledgeBaseRoleDB110E91",
      "Arn"
     ]
    },
    "name": "KBGenAIUnderwowledgeBaseF088A14C",
    "storageConfiguration": {
     "type": "OPENSEARCH_SERVERLESS",
     "opensearchServerlessConfiguration": {
      "collectionArn": {
       "Fn::GetAtt": [
        "KnowledgeBaseVectorCollection7204FC26",
        "Arn"
       ]
      },
      "vectorIndexName": "bedrock-knowledge-base-default-index",
      "fieldMapping": {
       "vectorField": "bedrock-knowledge-base-default-vector",
       "textField": "AMAZON_BEDROCK_TEXT_CHUNK",
       "metadataField": "AMAZON_BEDROCK_METADATA"
      }
     }
    }
   },
   "DependsOn": [
    "KnowledgeBaseKBCRPolicyF880EDB0",
    "KnowledgeBaseRoleDefaultPolicyF1120426",
    "KnowledgeBaseRoleDB110E91",
    "KnowledgeBaseVectorIndexManageIndexPolicy5BC4FA23",
    "KnowledgeBaseVectorIndex856C0712"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/KnowledgeBase/KB/Default"
   }
  },
  "KnowledgeBaseKBCRPolicyF880EDB0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "bedrock:CreateKnowledgeBase",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "bedrock:DeleteKnowledgeBase",
        "bedrock:TagResource",
        "bedrock:UpdateKnowledgeBase"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:bedrock:us-east-1:339263341917:knowledge-base/*"
      },
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "KnowledgeBaseRoleDB110E91",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "KnowledgeBaseKBCRPolicyF880EDB0",
    "Roles": [
     {
      "Ref": "BedrockCRProviderCRRole90406B17"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/KnowledgeBase/KBCRPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Bedrock CreateKnowledgeBase can't be restricted by resource.",
       "id": "AwsSolutions-IAM5"
      }
     ]
    }
   }
  },
  "KnowledgeBaseDataSource439A1EBD": {
   "Type": "Custom::Bedrock-DataSource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BedrockCRProviderframeworkonEvent412F4EF1",
      "Arn"
     ]
    },
    "knowledgeBaseId": {
     "Fn::GetAtt": [
      "KnowledgeBaseKBD784F467",
      "knowledgeBaseId"
     ]
    },
    "name": "underwriting-manual",
    "dataSourceConfiguration": {
     "type": "S3",
     "s3Configuration": {
      "bucketArn": {
       "Fn::GetAtt": [
        "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
        "Arn"
       ]
      }
     }
    },
    "vectorIngestionConfiguration": {}
   },
   "DependsOn": [
    "KnowledgeBaseDataSourceDataSourceCRPolicyA0D852AA"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/DataSource/DataSource/Default"
   }
  },
  "KnowledgeBaseDataSourceDataSourceCRPolicyA0D852AA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "bedrock:CreateDataSource",
        "bedrock:DeleteDataSource",
        "bedrock:UpdateDataSource"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:bedrock:us-east-1:339263341917:knowledge-base/*"
      },
      {
       "Action": [
        "s3:GetObject",
        "s3:ListBucket"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "UnderwritingManualS3Bucket964S3Bucketunderwritingmanualbucket9645004F1E0",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "KnowledgeBaseDataSourceDataSourceCRPolicyA0D852AA",
    "Roles": [
     {
      "Ref": "BedrockCRProviderCRRole90406B17"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/KnowledgeBase/DataSource/DataSourceCRPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Bedrock CreateDataSource uses wildcards to access any object in the specified bucket. A weird race condition makes CreateDataSource fail due to permissions on the first attempt. Permitting CreateDataSource on all KnowledgeBases allows CFN to deploy this policy earlier and avoid the race.",
       "id": "AwsSolutions-IAM5"
      }
     ]
    }
   }
  },
  "OpenSearchIndexCRProviderCRRole466FC04E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Ref": "KnowledgeBaseVectorCollectionAOSSApiAccessAllF67C95FE"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/CRRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.",
       "id": "AwsSolutions-IAM4"
      }
     ]
    }
   }
  },
  "OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "a2912058b7492462f84439982bc30d6d82b122913d61c23ff2d028385df9e527.zip"
    },
    "Description": "Custom Resource Provider",
    "Handler": "custom_resources.on_event",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "OpenSearchIndexCRProviderCRRole466FC04E",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "OpenSearchIndexCRProviderCRRole466FC04E"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/CustomResourcesFunction/Resource",
    "aws:asset:path": "asset.a2912058b7492462f84439982bc30d6d82b122913d61c23ff2d028385df9e527",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "OpenSearchIndexCRProviderCustomResourcesFunctionLogRetentionC32546EF": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/CustomResourcesFunction/LogRetention/Resource"
   }
  },
  "OpenSearchIndexCRProviderProviderRole87B4E831": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/ProviderRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.",
       "id": "AwsSolutions-IAM4"
      },
      {
       "reason": "CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        {
         "regex": "/^Resource::<OpenSearchIndexCRProviderCustomResourcesFunction[A-Z0-9]+\\.Arn>:\\*$/g"
        }
       ]
      }
     ]
    }
   }
  },
  "OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F",
    "Roles": [
     {
      "Ref": "OpenSearchIndexCRProviderProviderRole87B4E831"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/ProviderRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        {
         "regex": "/^Resource::<OpenSearchIndexCRProviderCustomResourcesFunction[A-Z0-9]+\\.Arn>:\\*$/g"
        }
       ]
      }
     ]
    }
   }
  },
  "OpenSearchIndexCRProviderframeworkonEvent6CAE4696": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "d9861ea7a45affd23e47a614acb2fddc6e45c20a891284c958187dafbf9ee36b.zip"
    },
    "Description": "AWS CDK resource provider framework - onEvent (GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/Provider)",
    "Environment": {
     "Variables": {
      "USER_ON_EVENT_FUNCTION_ARN": {
       "Fn::GetAtt": [
        "OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2",
        "Arn"
       ]
      }
     }
    },
    "Handler": "framework.onEvent",
    "Role": {
     "Fn::GetAtt": [
      "OpenSearchIndexCRProviderProviderRole87B4E831",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Timeout": 900
   },
   "DependsOn": [
    "OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F",
    "OpenSearchIndexCRProviderProviderRole87B4E831"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/Provider/framework-onEvent/Resource",
    "aws:asset:path": "asset.d9861ea7a45affd23e47a614acb2fddc6e45c20a891284c958187dafbf9ee36b",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Lambda runtime version is managed upstream by CDK.",
       "id": "AwsSolutions-L1"
      }
     ]
    }
   }
  },
  "OpenSearchIndexCRProviderframeworkonEventLogRetention64E7FA2B": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "OpenSearchIndexCRProviderframeworkonEvent6CAE4696"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/OpenSearchIndexCRProvider/Provider/framework-onEvent/LogRetention/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:DeleteRetentionPolicy",
        "logs:PutRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs20.x",
    "Timeout": 900,
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
    "aws:asset:path": "asset.4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BedrockCRProviderCRRole90406B17": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BedrockCRProvider/CRRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.",
       "id": "AwsSolutions-IAM4"
      }
     ]
    }
   }
  },
  "BedrockCRProviderCustomResourcesFunction9A70E3A5": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "b577d1b7184c6cda9de08b3211207c852c57dd1b287de796fa3b43ed7486b48a.zip"
    },
    "Description": "Custom Resource Provider",
    "Handler": "custom_resources.on_event",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "BedrockCRProviderCRRole90406B17",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 900
   },
   "DependsOn": [
    "BedrockCRProviderCRRole90406B17"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BedrockCRProvider/CustomResourcesFunction/Resource",
    "aws:asset:path": "asset.b577d1b7184c6cda9de08b3211207c852c57dd1b287de796fa3b43ed7486b48a",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BedrockCRProviderCustomResourcesFunctionLogRetention32CED555": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "BedrockCRProviderCustomResourcesFunction9A70E3A5"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BedrockCRProvider/CustomResourcesFunction/LogRetention/Resource"
   }
  },
  "BedrockCRProviderProviderRoleE6EBD17C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BedrockCRProvider/ProviderRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.",
       "id": "AwsSolutions-IAM4"
      },
      {
       "reason": "CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        {
         "regex": "/^Resource::<BedrockCRProviderCustomResourcesFunction[A-Z0-9]+\\.Arn>:\\*$/g"
        }
       ]
      }
     ]
    }
   }
  },
  "BedrockCRProviderProviderRoleDefaultPolicy517A1A7C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "BedrockCRProviderCustomResourcesFunction9A70E3A5",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "BedrockCRProviderCustomResourcesFunction9A70E3A5",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BedrockCRProviderProviderRoleDefaultPolicy517A1A7C",
    "Roles": [
     {
      "Ref": "BedrockCRProviderProviderRoleE6EBD17C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BedrockCRProvider/ProviderRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        {
         "regex": "/^Resource::<BedrockCRProviderCustomResourcesFunction[A-Z0-9]+\\.Arn>:\\*$/g"
        }
       ]
      }
     ]
    }
   }
  },
  "BedrockCRProviderframeworkonEvent412F4EF1": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "d9861ea7a45affd23e47a614acb2fddc6e45c20a891284c958187dafbf9ee36b.zip"
    },
    "Description": "AWS CDK resource provider framework - onEvent (GenAIUnderwritingValidationStack/BedrockCRProvider/Provider)",
    "Environment": {
     "Variables": {
      "USER_ON_EVENT_FUNCTION_ARN": {
       "Fn::GetAtt": [
        "BedrockCRProviderCustomResourcesFunction9A70E3A5",
        "Arn"
       ]
      }
     }
    },
    "Handler": "framework.onEvent",
    "Role": {
     "Fn::GetAtt": [
      "BedrockCRProviderProviderRoleE6EBD17C",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Timeout": 900
   },
   "DependsOn": [
    "BedrockCRProviderProviderRoleDefaultPolicy517A1A7C",
    "BedrockCRProviderProviderRoleE6EBD17C"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BedrockCRProvider/Provider/framework-onEvent/Resource",
    "aws:asset:path": "asset.d9861ea7a45affd23e47a614acb2fddc6e45c20a891284c958187dafbf9ee36b",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Lambda runtime version is managed upstream by CDK.",
       "id": "AwsSolutions-L1"
      }
     ]
    }
   }
  },
  "BedrockCRProviderframeworkonEventLogRetention862855F3": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "BedrockCRProviderframeworkonEvent412F4EF1"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/BedrockCRProvider/Provider/framework-onEvent/LogRetention/Resource"
   }
  },
  "Base64EncodeLambdaRole3CE23390": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "logs:CreateLogGroup",
         "Effect": "Allow",
         "Resource": "arn:aws:logs:us-east-1:339263341917:*"
        },
        {
         "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": "arn:aws:logs:us-east-1:339263341917:log-group:/aws/lambda/Base64EncodeLambda-964:*"
        },
        {
         "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
             }
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
             }
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "lambdaInvokePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Base64EncodeLambdaRole/Resource"
   }
  },
  "Base64EncodeLambdaLambdaBase64EncodeLambda96412F93FC1": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "33923623b98f54deffce284471cba2cbfc8d71609fe23c130384d784569d2381.zip"
    },
    "Environment": {
     "Variables": {
      "INPUT_S3_BUCKET_NAME": {
       "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
      },
      "INPUT_S3_BUCKET_CLASSIFICATION_KEY": "classification_input.json",
      "INPUT_S3_BUCKET_EXTRACT_NAME_AND_LICENSE_KEY": "extract_name_and_license_input.json"
     }
    },
    "FunctionName": "Base64EncodeLambda-964",
    "Handler": "base64_encode.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "Base64EncodeLambdaRole3CE23390",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "Base64EncodeLambdaRole3CE23390"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Base64EncodeLambda/Lambda-Base64EncodeLambda-964/Resource",
    "aws:asset:path": "asset.33923623b98f54deffce284471cba2cbfc8d71609fe23c130384d784569d2381",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "Base64EncodeLambdaLambdaBase64EncodeLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc344D9ED3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "Base64EncodeLambdaLambdaBase64EncodeLambda96412F93FC1",
      "Arn"
     ]
    },
    "Principal": "states.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/Base64EncodeLambda/Lambda-Base64EncodeLambda-964/Invoke--tnlpEgfIKpZyEIAINy+VhXFS+IfV5EJ7IaMp0cNGOc="
   }
  },
  "DmvAPICallLambdaRole13FFE649": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/DmvAPICallLambdaRole/Resource"
   }
  },
  "DmvAPICallLambdaLambdaDmvAPICallLambda96406DBF1C2": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "eabaece4797d76eebe39c7790c8d6a73b06d450235feedd3172ce39f1c4ca978.zip"
    },
    "FunctionName": "DmvAPICallLambda-964",
    "Handler": "dmv_api_call.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "DmvAPICallLambdaRole13FFE649",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "DmvAPICallLambdaRole13FFE649"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/DmvAPICallLambda/Lambda-DmvAPICallLambda-964/Resource",
    "aws:asset:path": "asset.eabaece4797d76eebe39c7790c8d6a73b06d450235feedd3172ce39f1c4ca978",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "DmvAPICallLambdaLambdaDmvAPICallLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc424A170B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DmvAPICallLambdaLambdaDmvAPICallLambda96406DBF1C2",
      "Arn"
     ]
    },
    "Principal": "states.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/DmvAPICallLambda/Lambda-DmvAPICallLambda-964/Invoke--tnlpEgfIKpZyEIAINy+VhXFS+IfV5EJ7IaMp0cNGOc="
   }
  },
  "CombineRetrievedInformationLambdaRoleB3DFD077": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/CombineRetrievedInformationLambdaRole/Resource"
   }
  },
  "CombineRetrievedInformationLambdaLambdaCombineRetrievedInformationLambda964649542E0": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "d098e34cc0de36e8bbf4ef2cccb759fc2fe58d19ccadb051b7b3244ed295129d.zip"
    },
    "FunctionName": "CombineRetrievedInformationLambda-964",
    "Handler": "combine_retrieved_information.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "CombineRetrievedInformationLambdaRoleB3DFD077",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "CombineRetrievedInformationLambdaRoleB3DFD077"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/CombineRetrievedInformationLambda/Lambda-CombineRetrievedInformationLambda-964/Resource",
    "aws:asset:path": "asset.d098e34cc0de36e8bbf4ef2cccb759fc2fe58d19ccadb051b7b3244ed295129d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "CombineRetrievedInformationLambdaLambdaCombineRetrievedInformationLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc1D731D27": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "CombineRetrievedInformationLambdaLambdaCombineRetrievedInformationLambda964649542E0",
      "Arn"
     ]
    },
    "Principal": "states.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/CombineRetrievedInformationLambda/Lambda-CombineRetrievedInformationLambda-964/Invoke--tnlpEgfIKpZyEIAINy+VhXFS+IfV5EJ7IaMp0cNGOc="
   }
  },
  "GenerateFinalPromptLambdaRoleDC2A62EA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "logs:CreateLogGroup",
         "Effect": "Allow",
         "Resource": "arn:aws:logs:us-east-1:339263341917:*"
        },
        {
         "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": "arn:aws:logs:us-east-1:339263341917:log-group:/aws/lambda/GenerateFinalPromptLambda-964:*"
        },
        {
         "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
             }
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
             }
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "lambdaInvokePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/GenerateFinalPromptLambdaRole/Resource"
   }
  },
  "GenerateFinalPromptLambdaLambdaGenerateFinalPromptLambda964B1550916": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-339263341917-us-east-1",
     "S3Key": "1097e91a5d2fb359227d6b572fc614203530d5777b4f1bade191a88b4c893c66.zip"
    },
    "Environment": {
     "Variables": {
      "INPUT_S3_BUCKET_NAME": {
       "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
      },
      "INPUT_S3_BUCKET_FINAL_PROMPT_KEY": "final_prompt_input.json"
     }
    },
    "FunctionName": "GenerateFinalPromptLambda-964",
    "Handler": "generate_final_prompt.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "GenerateFinalPromptLambdaRoleDC2A62EA",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 30
   },
   "DependsOn": [
    "GenerateFinalPromptLambdaRoleDC2A62EA"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/GenerateFinalPromptLambda/Lambda-GenerateFinalPromptLambda-964/Resource",
    "aws:asset:path": "asset.1097e91a5d2fb359227d6b572fc614203530d5777b4f1bade191a88b4c893c66",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "GenerateFinalPromptLambdaLambdaGenerateFinalPromptLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc8DD56970": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GenerateFinalPromptLambdaLambdaGenerateFinalPromptLambda964B1550916",
      "Arn"
     ]
    },
    "Principal": "states.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/GenerateFinalPromptLambda/Lambda-GenerateFinalPromptLambda-964/Invoke--tnlpEgfIKpZyEIAINy+VhXFS+IfV5EJ7IaMp0cNGOc="
   }
  },
  "StepFunctionsStateMachineExecutionRole83102128": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "states.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "bedrock:Retrieve",
          "bedrock:RetrieveAndGenerate"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": "lambda:InvokeFunction",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "Base64EncodeLambdaLambdaBase64EncodeLambda96412F93FC1",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "CombineRetrievedInformationLambdaLambdaCombineRetrievedInformationLambda964649542E0",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "DmvAPICallLambdaLambdaDmvAPICallLambda96406DBF1C2",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "GenerateFinalPromptLambdaLambdaGenerateFinalPromptLambda964B1550916",
            "Arn"
           ]
          }
         ]
        },
        {
         "Action": "bedrock:InvokeModel",
         "Effect": "Allow",
         "Resource": [
          "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0",
          "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0"
         ]
        },
        {
         "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "arn:aws:s3:::",
             {
              "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
             }
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "lambdaInvokePolicy"
     }
    ]
   },
   "DependsOn": [
    "Base64EncodeLambdaLambdaBase64EncodeLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc344D9ED3",
    "Base64EncodeLambdaLambdaBase64EncodeLambda96412F93FC1",
    "DmvAPICallLambdaLambdaDmvAPICallLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc424A170B",
    "DmvAPICallLambdaLambdaDmvAPICallLambda96406DBF1C2",
    "KnowledgeBaseDataSource439A1EBD",
    "KnowledgeBaseDataSourceDataSourceCRPolicyA0D852AA",
    "KnowledgeBaseKBD784F467",
    "KnowledgeBaseKBCRPolicyF880EDB0",
    "KnowledgeBaseRoleDefaultPolicyF1120426",
    "KnowledgeBaseRoleDB110E91",
    "KnowledgeBaseVectorCollectionAOSSApiAccessAllF67C95FE",
    "KnowledgeBaseVectorCollectionDataAccessPolicy345B3145",
    "KnowledgeBaseVectorCollectionEncryptionPolicyC8A80F57",
    "KnowledgeBaseVectorCollectionNetworkPolicyC7FEE8CD",
    "KnowledgeBaseVectorCollection7204FC26",
    "KnowledgeBaseVectorIndexManageIndexPolicy5BC4FA23",
    "KnowledgeBaseVectorIndex856C0712"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/StepFunctions/StateMachineExecutionRole/Resource"
   }
  },
  "StepFunctionsStateMachineAF92D462": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "Definition": {
     "Comment": "A description of my state machine",
     "StartAt": "Base64 Image Encoding",
     "States": {
      "Base64 Image Encoding": {
       "Type": "Task",
       "Resource": "arn:aws:states:::lambda:invoke",
       "OutputPath": "$.Payload",
       "Parameters": {
        "Payload.$": "$",
        "FunctionName": {
         "Fn::GetAtt": [
          "Base64EncodeLambdaLambdaBase64EncodeLambda96412F93FC1",
          "Arn"
         ]
        }
       },
       "Retry": [
        {
         "ErrorEquals": [
          "Lambda.ServiceException",
          "Lambda.AWSLambdaException",
          "Lambda.SdkClientException",
          "Lambda.TooManyRequestsException"
         ],
         "IntervalSeconds": 1,
         "MaxAttempts": 3,
         "BackoffRate": 2
        }
       ],
       "Next": "Classification",
       "InputPath": "$.detail"
      },
      "Classification": {
       "Type": "Task",
       "Resource": "arn:aws:states:::bedrock:invokeModel",
       "Parameters": {
        "ModelId": "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0",
        "Input": {
         "S3Uri": {
          "Fn::Join": [
           "",
           [
            "s3://",
            {
             "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
            },
            "/classification_input.json"
           ]
          ]
         }
        },
        "ContentType": "application/json",
        "Accept": "application/json"
       },
       "Next": "Choice (YES or NO)",
       "ResultPath": "$.result"
      },
      "Choice (YES or NO)": {
       "Type": "Choice",
       "Choices": [
        {
         "Not": {
          "Variable": "$.result.Body.content[0].text",
          "StringMatches": "YES"
         },
         "Comment": "It is not a driving license",
         "Next": "Fail"
        }
       ],
       "Default": "Parallel"
      },
      "Parallel": {
       "Type": "Parallel",
       "Next": "Generate Final Prompt",
       "Branches": [
        {
         "StartAt": "Extract Name and License #",
         "States": {
          "Extract Name and License #": {
           "Parameters": {
            "Accept": "application/json",
            "ContentType": "application/json",
            "Input": {
             "S3Uri": {
              "Fn::Join": [
               "",
               [
                "s3://",
                {
                 "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
                },
                "/extract_name_and_license_input.json"
               ]
              ]
             }
            },
            "ModelId": "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0"
           },
           "Resource": "arn:aws:states:::bedrock:invokeModel",
           "Type": "Task",
           "Next": "Call DMV with License Info"
          },
          "Call DMV with License Info": {
           "OutputPath": "$.Payload",
           "Parameters": {
            "FunctionName": {
             "Fn::GetAtt": [
              "DmvAPICallLambdaLambdaDmvAPICallLambda96406DBF1C2",
              "Arn"
             ]
            },
            "Payload.$": "$"
           },
           "Resource": "arn:aws:states:::lambda:invoke",
           "Retry": [
            {
             "BackoffRate": 2,
             "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
             ],
             "IntervalSeconds": 1,
             "MaxAttempts": 3
            }
           ],
           "Type": "Task",
           "End": true
          }
         }
        },
        {
         "StartAt": "Retrieve information from Underwriting Manual",
         "States": {
          "Retrieve information from Underwriting Manual": {
           "Type": "Task",
           "Parameters": {
            "KnowledgeBaseId": {
             "Fn::GetAtt": [
              "KnowledgeBaseKBD784F467",
              "knowledgeBaseId"
             ]
            },
            "RetrievalQuery": {
             "Text": "Underwriting rules applicable for a driver to get insurance.\n"
            }
           },
           "Resource": "arn:aws:states:::aws-sdk:bedrockagentruntime:retrieve",
           "Next": "Combine Retrieved Information"
          },
          "Combine Retrieved Information": {
           "Type": "Task",
           "Resource": "arn:aws:states:::lambda:invoke",
           "OutputPath": "$.Payload",
           "Parameters": {
            "FunctionName": {
             "Fn::GetAtt": [
              "CombineRetrievedInformationLambdaLambdaCombineRetrievedInformationLambda964649542E0",
              "Arn"
             ]
            },
            "Payload.$": "$"
           },
           "Retry": [
            {
             "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
             ],
             "IntervalSeconds": 1,
             "MaxAttempts": 3,
             "BackoffRate": 2
            }
           ],
           "End": true
          }
         }
        }
       ]
      },
      "Generate Final Prompt": {
       "Type": "Task",
       "Resource": "arn:aws:states:::lambda:invoke",
       "OutputPath": "$.Payload",
       "Parameters": {
        "Payload.$": "$",
        "FunctionName": {
         "Fn::GetAtt": [
          "GenerateFinalPromptLambdaLambdaGenerateFinalPromptLambda964B1550916",
          "Arn"
         ]
        }
       },
       "Retry": [
        {
         "ErrorEquals": [
          "Lambda.ServiceException",
          "Lambda.AWSLambdaException",
          "Lambda.SdkClientException",
          "Lambda.TooManyRequestsException"
         ],
         "IntervalSeconds": 1,
         "MaxAttempts": 3,
         "BackoffRate": 2
        }
       ],
       "Next": "Get Final Result from Bedrock"
      },
      "Get Final Result from Bedrock": {
       "Parameters": {
        "Accept": "application/json",
        "ContentType": "application/json",
        "Input": {
         "S3Uri": {
          "Fn::Join": [
           "",
           [
            "s3://",
            {
             "Ref": "StepFunctionInputOutputBucket964S3Bucketstepfunctioninputbucket9648E6550B4"
            },
            "/final_prompt_input.json"
           ]
          ]
         }
        },
        "ModelId": "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0"
       },
       "Resource": "arn:aws:states:::bedrock:invokeModel",
       "Type": "Task",
       "Next": "Success"
      },
      "Fail": {
       "Type": "Fail"
      },
      "Success": {
       "Type": "Succeed"
      }
     }
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "StepFunctionsStateMachineExecutionRole83102128",
      "Arn"
     ]
    },
    "StateMachineName": "UnderwritingValidationStateMachine"
   },
   "DependsOn": [
    "Base64EncodeLambdaLambdaBase64EncodeLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc344D9ED3",
    "Base64EncodeLambdaLambdaBase64EncodeLambda96412F93FC1",
    "DmvAPICallLambdaLambdaDmvAPICallLambda964InvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc424A170B",
    "DmvAPICallLambdaLambdaDmvAPICallLambda96406DBF1C2",
    "KnowledgeBaseDataSource439A1EBD",
    "KnowledgeBaseDataSourceDataSourceCRPolicyA0D852AA",
    "KnowledgeBaseKBD784F467",
    "KnowledgeBaseKBCRPolicyF880EDB0",
    "KnowledgeBaseRoleDefaultPolicyF1120426",
    "KnowledgeBaseRoleDB110E91",
    "KnowledgeBaseVectorCollectionAOSSApiAccessAllF67C95FE",
    "KnowledgeBaseVectorCollectionDataAccessPolicy345B3145",
    "KnowledgeBaseVectorCollectionEncryptionPolicyC8A80F57",
    "KnowledgeBaseVectorCollectionNetworkPolicyC7FEE8CD",
    "KnowledgeBaseVectorCollection7204FC26",
    "KnowledgeBaseVectorIndexManageIndexPolicy5BC4FA23",
    "KnowledgeBaseVectorIndex856C0712"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/StepFunctions/StateMachine"
   }
  },
  "EventBridgeStateMachineTargetEventsRole0B8B539B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "DependsOn": [
    "StepFunctionsStateMachineAF92D462",
    "StepFunctionsStateMachineExecutionRole83102128"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/EventBridge/StateMachineTarget/EventsRole/Resource"
   }
  },
  "EventBridgeStateMachineTargetEventsRoleDefaultPolicy8BE1DE6C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "StepFunctionsStateMachineAF92D462"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EventBridgeStateMachineTargetEventsRoleDefaultPolicy8BE1DE6C",
    "Roles": [
     {
      "Ref": "EventBridgeStateMachineTargetEventsRole0B8B539B"
     }
    ]
   },
   "DependsOn": [
    "StepFunctionsStateMachineAF92D462",
    "StepFunctionsStateMachineExecutionRole83102128"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/EventBridge/StateMachineTarget/EventsRole/DefaultPolicy/Resource"
   }
  },
  "EventBridgeExecuteStepFunctionAfterFileUploadRuleC429BC63": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Rule to invoke AWS Step Function flow after a file is uploaded into S3 bucket.",
    "EventPattern": {
     "source": [
      "aws.s3"
     ],
     "detail-type": [
      "Object Created"
     ],
     "detail": {
      "bucket": {
       "name": [
        "underwriting-document-bucket-964"
       ]
      }
     }
    },
    "Name": "ExecuteStepFunctionAfterFileUploadRule",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "StepFunctionsStateMachineAF92D462"
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "EventBridgeStateMachineTargetEventsRole0B8B539B",
        "Arn"
       ]
      }
     }
    ]
   },
   "DependsOn": [
    "StepFunctionsStateMachineAF92D462",
    "StepFunctionsStateMachineExecutionRole83102128"
   ],
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/EventBridge/ExecuteStepFunctionAfterFileUploadRule/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21S0W7iMBD8Ft6NS0C956OpTjpdqyIi9TVa7CV1cdbIuw6Hovz7KSYFKt3TjmfW6/HYS108FnoxgxPPjT3MvdvpvhIwBwUnrnte6f4pmQOKKvc0oUvZBO/M+UZP68viCRgHxau6t3j04dwiib5Iz1dCATMK6/VYBuWh3VnQfbmnFzhjfMfILpCqHDUeJdCvREZG5grKPd3jDcbW8bhpUA5a3W+Dx1HI9WZ4Qq9A0KC98d+IQYUjEiNE88EYO4wembO9Ck2KTs63nWXwHq8+1sYg89cYHxrWL6HZoiDlFhY87iffrMeBAoKvYD4cocIOSVj32zSZTx6HQZWJJbRb5JCiuQhX/E3axNA5i3F8A5WzrQQaR82UcO3HdGs4sfFOr09cepcDV/fDy0DWZbcmT6/jJLL+OmBse0tyTDKohS50USxnP409eNjxQ4OEEcR1OAeX/5YJxBKTGe/232jf0UiId1Heuuoua44s/p36fo9Y7dDGYA66/0Ph5NE2mK9drZ5BoMqGh0FRsKg/+aFbLnTxQy9mn+zcPCYS16LeXuo/uOYSnQwDAAA="
   },
   "Metadata": {
    "aws:cdk:path": "GenAIUnderwritingValidationStack/CDKMetadata/Default"
   }
  }
 },
 "Conditions": {
  "KnowledgeBaseVectorCollectionIsDataAccessPolicyNotEmptyD762485C": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      0,
      1
     ]
    }
   ]
  }
 },
 "Outputs": {
  "KnowledgeBaseId": {
   "Description": "Knowledge Base ID",
   "Value": {
    "Fn::GetAtt": [
     "KnowledgeBaseKBD784F467",
     "knowledgeBaseId"
    ]
   }
  },
  "DataSourceId": {
   "Description": "Data Source ID",
   "Value": {
    "Fn::GetAtt": [
     "KnowledgeBaseDataSource439A1EBD",
     "dataSourceId"
    ]
   }
  },
  "UnderwritingBucketURL": {
   "Description": "URL of the Underwriting Document Upload Bucket",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://s3.console.aws.amazon.com/s3/buckets/",
      {
       "Ref": "DocumentS3Bucket964S3Bucketunderwritingdocumentbucket96419F2A951"
      }
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}