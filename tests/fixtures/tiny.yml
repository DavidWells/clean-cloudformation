Resources:
  SolutionHelperServiceRoleF70C0E2A:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - 'Fn::Join':
            - ''
            - - 'arn:'
              - Ref: 'AWS::Partition'
              - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      'aws:cdk:path': >-
        AWSAccelerator-InstallerStack/SolutionHelper/SolutionHelper/ServiceRole/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
  SolutionHelper4825923B:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |2-

                  const response = require('cfn-response');
                  const https = require('https');

                  async function post(url, data) {
                    const dataString = JSON.stringify(data)
                    const options = {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        timeout: 1000, // in ms
                    }
                    
                    return new Promise((resolve, reject) => {
                        const req = https.request(url, options, (res) => {
                            if (res.statusCode < 200 || res.statusCode > 299) {
                                return reject(new Error('HTTP status code: ', res.statusCode))
                            }
                            const body = []
                            res.on('data', (chunk) => body.push(chunk))
                            res.on('end', () => {
                                const resString = Buffer.concat(body).toString()
                                resolve(resString)
                            })
                        })
                        req.on('error', (err) => {
                            reject(err)
                        })
                        req.on('timeout', () => {
                            req.destroy()
                            reject(new Error('Request time out'))
                        })
                        req.write(dataString)
                        req.end()
                    })
                  }

                  function uuidv4() {
                    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                  }


                  function sanitizeData(resourceProperties) {
                    const keysToExclude = ['ServiceToken', 'Resource', 'SolutionId', 'UUID'];
                    return Object.keys(resourceProperties).reduce((sanitizedData, key) => {
                        if (!keysToExclude.includes(key)) {
                            sanitizedData[key] = resourceProperties[key];
                        }
                        return sanitizedData;
                    }, {})
                  }

                  exports.handler = async function (event, context) {
                    console.log(JSON.stringify(event, null, 4));
                    const requestType = event.RequestType;
                    const resourceProperties = event.ResourceProperties;
                    const resource = resourceProperties.Resource;
                    let data = {};
                    try {
                        if (resource === 'UUID' && requestType === 'Create') {
                            data['UUID'] = uuidv4();
                        }
                        if (resource === 'AnonymousMetric') {
                            const currentDate = new Date()
                            data = sanitizeData(resourceProperties);
                            data['RequestType'] = requestType;
                            const payload = {
                                Solution: resourceProperties.SolutionId,
                                UUID: resourceProperties.UUID,
                                TimeStamp: currentDate.toISOString(),
                                Data: data
                            }

                            console.log('Sending metrics data: ', JSON.stringify(payload, null, 2));
                            await post('https://metrics.awssolutionsbuilder.com/generic', payload);
                            console.log('Sent Data');
                        }
                    } catch (error) {
                        console.log(error);
                    }
                
                    if (requestType === 'Create') {
                      await response.send(event, context, response.SUCCESS, data);
                    }
                    else {
                      await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
                    }
                    return;
                  } 
                
      Description: >-
        This function generates UUID for each deployment and sends anonymous
        data to the AWS Solutions team
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - SolutionHelperServiceRoleF70C0E2A
          - Arn
      Runtime: nodejs18.x
      Timeout: 30
    DependsOn:
      - SolutionHelperServiceRoleF70C0E2A
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole
          - id: W89
            reason: >-
              This function supports infrastructure deployment and is not
              deployed inside a VPC.
          - id: W92
            reason: >-
              This function supports infrastructure deployment and does not
              require setting ReservedConcurrentExecutions.
    Condition: SolutionHelperAnonymousDataToAWS62E4FDE2
